@isTest public class TestCompanyAgencyMatchCheck 
{
    // test the generation of proper Volunteer Opportunity with (almost) full data
    static testMethod void testGenTriggers2a()
    {
        // similar setup to above test but with all columns needed        
        // for a successful Vol Opp insert.
        // it appears these objects do not persist after the prior method runs
        // as the following assert failed.
        //List <Account> company = [select Id from Account where Name = 'State Street'];
        //System.assertEquals (company.size(), 1, 'State Street insert failed.');
        Account company = new Account();
        RecordType rectype = [select Id from RecordType where Name = 'Business'];
        company.RecordTypeId = rectype.Id;
        company.Name = 'State Street';
        insert company;
        Integer ct = [select count() from Account where Name = 'State Street'];
        System.assertEquals (ct, 1, 'State Street insert failed.');
        // minimally requires Company Intake and Project Site Visit
        Company_Intake__c ci = new Company_Intake__c();
        ci.Company__c = company.Id;
        ci.Lunch_Notes__c = 'pbj';
        insert ci;
        ct = [select count() from Company_Intake__c
              where Company__c = :company.Id];
        System.assertEquals (ct, 1, 'Company Intake insert failed.');
        // agency side
        Account agency = new Account();
        rectype = [select Id from RecordType where Name = 'Nonprofit'];
        agency.RecordTypeId = rectype.Id;
        agency.Name = 'Pine St Inn';
        agency.HOC__Genders_Served__c = 'Female';
        agency.HOC__Impact_Area__c = 'Hunger & Homelessness';
        agency.HOC__Age_Groups_Served__c = 'All ages';
        insert agency;
        ct = [select count() from Account where Name = 'Pine St Inn'];
        System.assertEquals (ct, 1, 'Pine St Inn insert failed.');
        List<Account> agencyList = [select Id from Account where Name = 'Pine St Inn'];
        // location needs a zip object
        /* this does not work so comment it out
        HOC__ZipCode__c zip = new HOC__ZipCode__c();
        zip.Name = '02116';
        insert zip;
        zip = new HOC__ZipCode__c();
        zip.Name = '02117';
        insert zip;
        List<HOC__ZipCode__c> zips = [select Id,Name from HOC__ZipCode__c];
        system.debug (Logginglevel.INFO, 'zips list size=' + zips.size());
        // need a location
        HOC__Location__c loc = new HOC__Location__c();
        loc.Name = 'HQ';
        rectype = [select Id from RecordType where Name = 'Site Specific'];
        loc.RecordTypeId = rectype.Id;
        system.debug (Logginglevel.INFO, 'agencyList count=' + agencyList.size());
        loc.HOC__Organization__c = agencyList.get(0).Id;
        loc.HOC__Street__c = '30 Harrison Av';
        loc.HOC__City__c = 'Boston';
        loc.HOC__State_Province__c = 'MA';
        loc.HOC__Zip_Postal_Code__c = zips.get(0).Id;
        loc.HOC__Zip_Code__c = zips.get(0).Name;
        loc.HOC__Country__c = 'United States';
        System.assert (rectype != null, 'rectype is null');
        System.assert (zips.size() > 0, 'zips are empty');
        System.assert (agencyList.size() > 0, 'agencyList is empty');       
        insert loc;
        List<HOC__Location__c> locList = [Select Id from HOC__Location__c where Name = 'HQ'];
        */
        Project_Site_Visit__c psv = new Project_Site_Visit__c();
        psv.Name = 'Serve Dinner';
        Date projDate = Date.newInstance (2015, 3, 16);
        psv.Project_Date__c = projDate;
        psv.Nonprofit_Agency__c = agencyList.get(0).Id;
        psv.Minimum_Volunteer_Age__c = 18;
        psv.Min_Volunteer_Age_w_adult__c = 17;
        psv.Description__c = 'a cool project';
        psv.Start_Time__c = '9:30 AM';
        psv.End_Time__c = '4:30 PM';
        psv.Local_Impact_Area__c = 'Basic Needs';
        //psv.Project_Location__c = locList.get(0).Id;
        insert psv;
        ct = [select count() from Project_Site_Visit__c 
              where Nonprofit_Agency__c = :agency.Id];
        System.assertEquals (ct, 1, 'Proj Site Visit insert failed.');
        // insert a minimal company agency match
        Company_Agency_Match__c cam = new Company_Agency_Match__c();
        cam.Company_Intake__c = ci.Id;
        cam.Project_Site_Visit__c = psv.Id;
        cam.Minimum_Volunteers__c = 5;
        cam.Maximum_Volunteers__c = 10;
        cam.Generate_on_Save__c = true;
        try
        {
            insert cam;
        }
        catch (Exception e)
        {
            system.debug (Logginglevel.INFO, e.getMessage());
            system.assert (e.getMessage().contains('Project-Location'));
            return;
        }
    }
}